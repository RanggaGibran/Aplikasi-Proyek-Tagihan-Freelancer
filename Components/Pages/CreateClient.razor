@page "/clients/create"
@using Aplikasi_Proyek___Tagihan_Freelancer.Services
@using Aplikasi_Proyek___Tagihan_Freelancer.Models
@inject IClientService ClientService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Tambah Klien Baru</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="bi bi-person-plus"></i>
                        Tambah Klien Baru
                    </h4>
                </div>
                <div class="card-body">
                    <EditForm Model="client" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Nama Klien <span class="text-danger">*</span></label>
                                <InputText id="name" class="form-control" @bind-Value="client.Name" />
                                <ValidationMessage For="@(() => client.Name)" class="text-danger" />
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label for="company" class="form-label">Perusahaan</label>
                                <InputText id="company" class="form-control" @bind-Value="client.Company" />
                                <ValidationMessage For="@(() => client.Company)" class="text-danger" />
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="client.Email" />
                                <ValidationMessage For="@(() => client.Email)" class="text-danger" />
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label for="phone" class="form-label">Nomor Telepon</label>
                                <InputText id="phone" class="form-control" @bind-Value="client.PhoneNumber" />
                                <ValidationMessage For="@(() => client.PhoneNumber)" class="text-danger" />
                            </div>
                        </div>
                        
                        <hr>
                        
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                <i class="bi bi-arrow-left"></i>
                                Kembali
                            </button>
                            
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="bi bi-check"></i>
                                Simpan Klien
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Client client = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            await ClientService.CreateClientAsync(client);
            Navigation.NavigateTo("/clients");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating client: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/clients");
    }
}
