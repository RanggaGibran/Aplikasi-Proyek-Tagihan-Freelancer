@page "/clients"
@using Aplikasi_Proyek___Tagihan_Freelancer.Services
@using Aplikasi_Proyek___Tagihan_Freelancer.Models
@inject IClientService ClientService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Manajemen Klien</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="page-title">
                    <i class="bi bi-people-fill"></i>
                    Manajemen Klien
                </h1>
                <a href="/clients/create" class="btn btn-primary">
                    <i class="bi bi-person-plus"></i>
                    Tambah Klien
                </a>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" placeholder="Cari klien..." 
                       @bind="searchTerm" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (clients?.Any() == true)
    {
        <div class="row">
            @foreach (var client in clients)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card client-card h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-start justify-content-between">
                                <div class="client-avatar">
                                    @client.Name.Substring(0, 1).ToUpper()
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-link btn-sm" type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="/clients/@client.Id">
                                            <i class="bi bi-eye"></i> Detail
                                        </a></li>
                                        <li><a class="dropdown-item" href="/clients/@client.Id/edit">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><button class="dropdown-item text-danger" @onclick="() => DeleteClient(client.Id)">
                                            <i class="bi bi-trash"></i> Hapus
                                        </button></li>
                                    </ul>
                                </div>
                            </div>
                            
                            <h5 class="card-title mt-3">@client.Name</h5>
                            
                            @if (!string.IsNullOrEmpty(client.Company))
                            {
                                <p class="text-muted mb-2">
                                    <i class="bi bi-building"></i>
                                    @client.Company
                                </p>
                            }
                            
                            @if (!string.IsNullOrEmpty(client.Email))
                            {
                                <p class="text-muted mb-2">
                                    <i class="bi bi-envelope"></i>
                                    @client.Email
                                </p>
                            }
                            
                            @if (!string.IsNullOrEmpty(client.PhoneNumber))
                            {
                                <p class="text-muted mb-2">
                                    <i class="bi bi-telephone"></i>
                                    @client.PhoneNumber
                                </p>
                            }
                            
                            <hr>
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-primary">
                                    @client.Projects.Count() proyek
                                </span>
                                <small class="text-muted">
                                    Dibuat: @client.CreatedAt.ToString("dd MMM yyyy")
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-people display-1 text-muted"></i>
            <h3 class="mt-3 text-muted">Belum ada klien</h3>
            <p class="text-muted">Mulai dengan menambah klien pertama Anda.</p>
            <a href="/clients/create" class="btn btn-primary">
                <i class="bi bi-person-plus"></i>
                Tambah Klien Pertama
            </a>
        </div>
    }
</div>

@code {
    private IEnumerable<Client>? clients;
    private string searchTerm = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        isLoading = true;
        try
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                clients = await ClientService.GetAllClientsAsync();
            }
            else
            {
                clients = await ClientService.SearchClientsAsync(searchTerm);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading clients: {ex.Message}");
            clients = new List<Client>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchChanged()
    {
        await LoadClients();
    }

    private async Task DeleteClient(Guid clientId)
    {
        if (await ClientService.DeleteClientAsync(clientId))
        {
            await LoadClients();
        }
    }
}
