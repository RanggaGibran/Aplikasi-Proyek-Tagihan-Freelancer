@page "/projects/{ProjectId:guid}/tasks"
@using Aplikasi_Proyek___Tagihan_Freelancer.Models
@using Aplikasi_Proyek___Tagihan_Freelancer.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject ITaskService TaskService
@inject IProjectService ProjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Project Tasks</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2>
                        <i class="fas fa-tasks text-primary me-2"></i>
                        @if (project != null)
                        {
                            <span>@project.Name - Tasks</span>
                        }
                        else
                        {
                            <span>Project Tasks</span>
                        }
                    </h2>
                    @if (project != null)
                    {
                        <p class="text-muted mb-0">
                            <i class="fas fa-user me-1"></i>@project.Client?.Name
                            <span class="mx-2">|</span>
                            <span class="badge bg-@GetStatusColor(project.Status)">@project.Status</span>
                        </p>
                    }
                </div>
                <div>
                    <button class="btn btn-secondary me-2" @onclick="BackToProjects">
                        <i class="fas fa-arrow-left me-2"></i>Back to Projects
                    </button>
                    <button class="btn btn-primary" @onclick="ShowAddTaskModal">
                        <i class="fas fa-plus me-2"></i>Add Task
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (tasks == null || !tasks.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">No tasks found</h4>
            <p class="text-muted">Add your first task to get started.</p>
            <button class="btn btn-primary" @onclick="ShowAddTaskModal">
                <i class="fas fa-plus me-2"></i>Add First Task
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <h5 class="text-primary border-bottom pb-2">
                    <i class="fas fa-clock me-2"></i>To Do
                </h5>
                @foreach (var task in tasks.Where(t => t.Status == Models.TaskStatus.ToDo))
                {
                    <div class="card mb-3 task-card">
                        <div class="card-body">
                            <h6 class="card-title">@task.Title</h6>
                            <p class="card-text small text-muted">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    @if (task.DueDate.HasValue)
                                    {
                                        <i class="fas fa-calendar me-1"></i>@task.DueDate.Value.ToString("MMM dd")
                                    }
                                </small>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" @onclick="() => MoveTask(task, Models.TaskStatus.InProgress)">
                                        <i class="fas fa-play"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="() => EditTask(task)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteTask(task)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <div class="col-md-4">
                <h5 class="text-warning border-bottom pb-2">
                    <i class="fas fa-spinner me-2"></i>In Progress
                </h5>
                @foreach (var task in tasks.Where(t => t.Status == Models.TaskStatus.InProgress))
                {
                    <div class="card mb-3 task-card border-warning">
                        <div class="card-body">
                            <h6 class="card-title">@task.Title</h6>
                            <p class="card-text small text-muted">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    @if (task.DueDate.HasValue)
                                    {
                                        <i class="fas fa-calendar me-1"></i>@task.DueDate.Value.ToString("MMM dd")
                                    }
                                </small>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-success" @onclick="() => MoveTask(task, Models.TaskStatus.Completed)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="() => EditTask(task)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteTask(task)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <div class="col-md-4">
                <h5 class="text-success border-bottom pb-2">
                    <i class="fas fa-check-circle me-2"></i>Completed
                </h5>
                @foreach (var task in tasks.Where(t => t.Status == Models.TaskStatus.Completed))
                {
                    <div class="card mb-3 task-card border-success">
                        <div class="card-body">
                            <h6 class="card-title">@task.Title</h6>
                            <p class="card-text small text-muted">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-success">
                                    <i class="fas fa-check me-1"></i>Completed
                                </small>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-warning" @onclick="() => MoveTask(task, Models.TaskStatus.InProgress)">
                                        <i class="fas fa-undo"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteTask(task)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Add Task Modal -->
<div class="modal fade @(showAddModal ? "show d-block" : "d-none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Task</h5>
                <button type="button" class="btn-close" @onclick="HideAddTaskModal"></button>
            </div>
            <EditForm Model="newTask" OnValidSubmit="HandleAddTask">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    
                    <div class="mb-3">
                        <label class="form-label">Title *</label>
                        <InputText class="form-control" @bind-Value="newTask.Title" />
                        <ValidationMessage For="@(() => newTask.Title)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="newTask.Description" />
                        <ValidationMessage For="@(() => newTask.Description)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Due Date</label>
                        <InputDate class="form-control" @bind-Value="newTask.DueDate" />
                        <ValidationMessage For="@(() => newTask.DueDate)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Estimated Hours</label>
                        <InputNumber class="form-control" @bind-Value="newTask.EstimatedHours" />
                        <ValidationMessage For="@(() => newTask.EstimatedHours)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddTaskModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Task</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showAddModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid ProjectId { get; set; }
    
    private Project? project;
    private IEnumerable<ProjectTask>? tasks;
    private bool isLoading = true;
    private bool showAddModal = false;
    private ProjectTask newTask = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        
        project = await ProjectService.GetProjectByIdAsync(ProjectId);
        if (project == null)
        {
            Navigation.NavigateTo("/projects");
            return;
        }
        
        tasks = await TaskService.GetTasksByProjectIdAsync(ProjectId);
        isLoading = false;
        StateHasChanged();
    }

    private void ShowAddTaskModal()
    {
        newTask = new ProjectTask { ProjectId = ProjectId, Status = Models.TaskStatus.ToDo };
        showAddModal = true;
        StateHasChanged();
    }

    private void HideAddTaskModal()
    {
        showAddModal = false;
        newTask = new();
        StateHasChanged();
    }

    private async Task HandleAddTask()
    {
        try
        {
            await TaskService.CreateTaskAsync(newTask);
            HideAddTaskModal();
            await LoadData();
            await JSRuntime.InvokeVoidAsync("alert", "Task added successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding task: {ex.Message}");
        }
    }

    private async Task MoveTask(ProjectTask task, Models.TaskStatus newStatus)
    {
        try
        {
            await TaskService.UpdateTaskStatusAsync(task.Id, newStatus);
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating task: {ex.Message}");
        }
    }

    private async Task DeleteTask(ProjectTask task)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirm)
        {
            try
            {
                await TaskService.DeleteTaskAsync(task.Id);
                await LoadData();
                await JSRuntime.InvokeVoidAsync("alert", "Task deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting task: {ex.Message}");
            }
        }
    }    private void EditTask(ProjectTask task)
    {
        // For now, show an alert. In a full implementation, this would open an edit modal
        JSRuntime.InvokeVoidAsync("alert", "Edit functionality will be implemented in the next phase.");
    }
    
    private void BackToProjects()
    {
        Navigation.NavigateTo("/projects");
    }
    
    private string GetStatusColor(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Aktif => "success",
            ProjectStatus.OnHold => "warning",
            ProjectStatus.Selesai => "primary",
            ProjectStatus.Dibatalkan => "danger",
            _ => "secondary"
        };
    }
}
