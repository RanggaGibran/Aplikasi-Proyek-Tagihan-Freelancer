@page "/projects"
@using Aplikasi_Proyek___Tagihan_Freelancer.Services
@using Aplikasi_Proyek___Tagihan_Freelancer.Models
@inject IProjectService ProjectService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Manajemen Proyek</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="page-title">
                    <i class="bi bi-briefcase-fill"></i>
                    Manajemen Proyek
                </h1>
                <a href="/projects/create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i>
                    Tambah Proyek
                </a>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="statusFilter" id="all" autocomplete="off" 
                       @onchange="() => FilterByStatus(null)" checked="@(selectedStatus == null)">
                <label class="btn btn-outline-primary" for="all">Semua</label>

                <input type="radio" class="btn-check" name="statusFilter" id="new" autocomplete="off" 
                       @onchange="() => FilterByStatus(ProjectStatus.Baru)" checked="@(selectedStatus == ProjectStatus.Baru)">
                <label class="btn btn-outline-primary" for="new">Baru</label>

                <input type="radio" class="btn-check" name="statusFilter" id="active" autocomplete="off" 
                       @onchange="() => FilterByStatus(ProjectStatus.Aktif)" checked="@(selectedStatus == ProjectStatus.Aktif)">
                <label class="btn btn-outline-primary" for="active">Aktif</label>

                <input type="radio" class="btn-check" name="statusFilter" id="completed" autocomplete="off" 
                       @onchange="() => FilterByStatus(ProjectStatus.Selesai)" checked="@(selectedStatus == ProjectStatus.Selesai)">
                <label class="btn btn-outline-primary" for="completed">Selesai</label>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredProjects?.Any() == true)
    {
        <div class="row">
            @foreach (var project in filteredProjects)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card project-card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge @GetStatusBadgeClass(project.Status)">
                                @GetStatusText(project.Status)
                            </span>
                            <div class="dropdown">
                                <button class="btn btn-link btn-sm text-white" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="/projects/@project.Id">
                                        <i class="bi bi-eye"></i> Detail
                                    </a></li>
                                    <li><a class="dropdown-item" href="/projects/@project.Id/edit">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a></li>
                                    <li><a class="dropdown-item" href="/projects/@project.Id/tasks">
                                        <i class="bi bi-list-task"></i> Kelola Tugas
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item text-danger" @onclick="() => DeleteProject(project.Id)">
                                        <i class="bi bi-trash"></i> Hapus
                                    </button></li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="card-body">
                            <h5 class="card-title">@project.Name</h5>
                            
                            <p class="text-muted mb-2">
                                <i class="bi bi-person"></i>
                                @project.Client?.Name
                            </p>
                            
                            @if (!string.IsNullOrEmpty(project.Description))
                            {
                                <p class="card-text text-muted small">
                                    @(project.Description.Length > 100 ? project.Description.Substring(0, 100) + "..." : project.Description)
                                </p>
                            }
                            
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="h5 text-success mb-0">
                                    @project.TotalValue.ToString("C", new System.Globalization.CultureInfo("id-ID"))
                                </span>
                                @if (project.DueDate.HasValue)
                                {
                                    <small class="text-muted">
                                        <i class="bi bi-calendar"></i>
                                        @project.DueDate.Value.ToString("dd MMM yyyy")
                                    </small>
                                }
                            </div>
                            
                            <div class="progress mb-3">
                                <div class="progress-bar" role="progressbar" 
                                     style="width: @(GetProgressPercentage(project))%" 
                                     aria-valuenow="@GetProgressPercentage(project)" aria-valuemin="0" aria-valuemax="100">
                                    @GetProgressPercentage(project)%
                                </div>
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-secondary">
                                    @project.Tasks.Count() tugas
                                </span>
                                <small class="text-muted">
                                    @project.CreatedAt.ToString("dd MMM yyyy")
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-briefcase display-1 text-muted"></i>
            <h3 class="mt-3 text-muted">
                @(selectedStatus.HasValue ? $"Tidak ada proyek dengan status {GetStatusText(selectedStatus.Value)}" : "Belum ada proyek")
            </h3>
            <p class="text-muted">Mulai dengan membuat proyek pertama Anda.</p>
            <a href="/projects/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Buat Proyek Baru
            </a>
        </div>
    }
</div>

@code {
    private IEnumerable<Project>? projects;
    private IEnumerable<Project>? filteredProjects;
    private ProjectStatus? selectedStatus = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetAllProjectsAsync();
            FilterProjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
            projects = new List<Project>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterByStatus(ProjectStatus? status)
    {
        selectedStatus = status;
        FilterProjects();
    }

    private void FilterProjects()
    {
        if (projects == null) return;

        filteredProjects = selectedStatus.HasValue 
            ? projects.Where(p => p.Status == selectedStatus.Value)
            : projects;
    }

    private async Task DeleteProject(Guid projectId)
    {
        if (await ProjectService.DeleteProjectAsync(projectId))
        {
            await LoadProjects();
        }
    }

    private string GetStatusBadgeClass(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Baru => "bg-secondary",
            ProjectStatus.Aktif => "bg-primary",
            ProjectStatus.Selesai => "bg-success",
            ProjectStatus.Dibatalkan => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Baru => "Baru",
            ProjectStatus.Aktif => "Aktif",
            ProjectStatus.Selesai => "Selesai",
            ProjectStatus.Dibatalkan => "Dibatalkan",
            _ => "Unknown"
        };
    }

    private int GetProgressPercentage(Project project)
    {
        if (project.Tasks?.Any() != true)
            return 0;

        var completedTasks = project.Tasks.Count(t => t.Status == Models.TaskStatus.Completed);
        return (int)Math.Round((double)completedTasks / project.Tasks.Count() * 100);
    }
}
