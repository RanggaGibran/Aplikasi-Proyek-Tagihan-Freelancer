@page "/projects/{Id:guid}/edit"
@using Aplikasi_Proyek___Tagihan_Freelancer.Models
@using Aplikasi_Proyek___Tagihan_Freelancer.Services
@inject IProjectService ProjectService
@inject IClientService ClientService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Edit Project</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-project-diagram me-2"></i>Edit Project
                    </h3>
                </div>
                <div class="card-body">
                    @if (project == null || clients == null)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Saving...</span>
                            </div>
                            <p class="mt-2">Updating project...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="project" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Project Name *</label>
                                        <InputText id="name" class="form-control" @bind-Value="project.Name" />
                                        <ValidationMessage For="@(() => project.Name)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="client" class="form-label">Client *</label>
                                        <InputSelect id="client" class="form-select" @bind-Value="project.ClientId">
                                            <option value="">Select a client...</option>
                                            @foreach (var client in clients)
                                            {
                                                <option value="@client.Id">@client.Name (@client.Company)</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => project.ClientId)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="status" class="form-label">Status *</label>
                                        <InputSelect id="status" class="form-select" @bind-Value="project.Status">
                                            @foreach (var status in Enum.GetValues<ProjectStatus>())
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => project.Status)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="startDate" class="form-label">Start Date</label>
                                        <InputDate id="startDate" class="form-control" @bind-Value="project.StartDate" />
                                        <ValidationMessage For="@(() => project.StartDate)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="deadline" class="form-label">Deadline</label>
                                        <InputDate id="deadline" class="form-control" @bind-Value="project.Deadline" />
                                        <ValidationMessage For="@(() => project.Deadline)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="budget" class="form-label">Budget</label>
                                        <InputNumber id="budget" class="form-control" @bind-Value="project.Budget" />
                                        <ValidationMessage For="@(() => project.Budget)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="hourlyRate" class="form-label">Hourly Rate</label>
                                        <InputNumber id="hourlyRate" class="form-control" @bind-Value="project.HourlyRate" />
                                        <ValidationMessage For="@(() => project.HourlyRate)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" rows="4" @bind-Value="project.Description" />
                                <ValidationMessage For="@(() => project.Description)" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                                    <i class="fas fa-times me-2"></i>Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                    <i class="fas fa-save me-2"></i>Update Project
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }
    
    private Project? project;
    private IEnumerable<Client>? clients;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        project = await ProjectService.GetProjectByIdAsync(Id);
        clients = await ClientService.GetAllClientsAsync();
        
        if (project == null)
        {
            Navigation.NavigateTo("/projects");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (project == null) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            await ProjectService.UpdateProjectAsync(project);
            await JSRuntime.InvokeVoidAsync("alert", "Project updated successfully!");
            Navigation.NavigateTo("/projects");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating project: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/projects");
    }
}
